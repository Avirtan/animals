local events_render = require "src.render.events_render"
local render_state = require "src.render.render_state"

local function create_predicates(...)
    local arg = { ... }
    local predicates = {}
    for _, predicate_name in pairs(arg) do
        predicates[predicate_name] = render.predicate({ predicate_name })
    end
    return predicates
end

function init(self)
    self.predicates = create_predicates("sprite_character", "tile", "gui", "particle", "model", "debug_text")

    local state = render_state.init_state()
    self.state = state
    render_state.update_state()
end

function update(self)
    local state = self.state

    local predicates = self.predicates
    -- clear screen buffers
    --
    -- turn on depth_mask before `render.clear()` to clear it as well
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear(state.clear_buffers)

    -- setup camera view and projection
    --
    local draw_options_world = render_state.enable_world_camera()
    render.set_viewport(0, 0, state.window_width, state.window_height)

    -- set states used for all the world predicates
    render.set_blend_func(graphics.BLEND_FACTOR_SRC_ALPHA, graphics.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA)
    render.enable_state(graphics.STATE_DEPTH_TEST)

    -- render `model` predicate for default 3D material
    --
    render.enable_state(graphics.STATE_CULL_FACE)
    render.draw(predicates.model, draw_options_world)
    render.set_depth_mask(false)
    render.disable_state(graphics.STATE_CULL_FACE)

    -- render the other components: sprites, tilemaps, particles etc
    --
    render.enable_state(graphics.STATE_BLEND)
    render.draw(predicates.tile, draw_options_world)
    render.draw(predicates.sprite_character, draw_options_world)
    render.draw(predicates.particle, draw_options_world)
    render.disable_state(graphics.STATE_DEPTH_TEST)

    render.draw_debug3d()

    -- render GUI
    --
    local camera_gui = render_state.enable_gui_camera()

    render.enable_state(graphics.STATE_STENCIL_TEST)
    render.draw(predicates.gui, camera_gui.options)
    render.draw(predicates.debug_text, camera_gui.options)
    render.disable_state(graphics.STATE_STENCIL_TEST)
    render.disable_state(graphics.STATE_BLEND)
end

function on_message(self, message_id, message)
    local state = self.state
    -- local camera = state.main_camera
    if message_id == events_render.MSG_CLEAR_COLOR then
        render_state.set_color_clear(message.color)
    elseif message_id == events_render.MSG_WINDOW_RESIZED then
        render_state.update_state()
    end
    -- elseif message_id == MSG_SET_VIEW_PROJ then
    --     camera.view = message.view
    --     self.camera_projection = message.projection or vmath.matrix4()
    --     update_camera(camera, state)
    -- elseif message_id == MSG_SET_CAMERA_PROJ then
    --     camera.projection_fn = function() return self.camera_projection end
    -- elseif message_id == MSG_USE_STRETCH_PROJ then
    --     init_camera(camera, get_stretch_projection, message.near, message.far)
    --     update_camera(camera, state)
    -- elseif message_id == MSG_USE_FIXED_PROJ then
    --     init_camera(camera, get_fixed_projection, message.near, message.far, message.zoom)
    --     update_camera(camera, state)
    -- elseif message_id == MSG_USE_FIXED_FIT_PROJ then
    --     init_camera(camera, get_fixed_fit_projection, message.near, message.far)
    --     update_camera(camera, state)
    -- end
end
