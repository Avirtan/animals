local event_service_controller = require "src.services.controllers.event_service"
local level_service = require "src.services.levels.level_service"
local factory_service = require "src.services.levels.factory_service"
local events_service = require "src.services.events_service"
local unit_manager = require "src.managers.unit_manager"
local world_ecs = require "src.ecs.world_ecs"

local spawn_player_system = require "src.ecs.systems.spawn_player_system"
local move_input_system = require "src.ecs.systems.units.move_input_system"
local animation_unit_move_system = require "src.ecs.systems.animations.animation_unit_move_system"
local camera_follow_system = require "src.ecs.systems.camera.camera_follow_system"
local aim_moving_system = require "src.ecs.systems.aim.aim_moving_system"


local spawn_player_component = require "src.ecs.components.events.sapwn_units.spawn_player_component"
local transform_component = require "src.ecs.components.transform.transform_component"
local character_tag_component = require "src.ecs.components.tags.character_tag_component"

go.property("player_factory", msg.url())
go.property("enemy_factory", msg.url())
go.property("bullet_factory", msg.url())
go.property("location_controller", msg.url())
go.property("camera", msg.url())

function init(self)
    level_service.set_level_controller(msg.url())
    factory_service.set_factory(factory_service.factory_name.player, self.player_factory)
    factory_service.set_factory(factory_service.factory_name.enemy, self.enemy_factory)
    factory_service.set_factory(factory_service.factory_name.bullet, self.bullet_factory)

    local world = world_ecs.new(world_ecs.world_id.Main)
    local entity_spawn_player = world_ecs.create_entity(world_ecs.world_id.Main)

    -- local id2 = world_ecs.create_entity(world_ecs.world_id.Main)
    -- local id3 = world_ecs.create_entity(world_ecs.world_id.Main)

    -- local c1 = transform_component.new()
    -- world_ecs.add_component(world_ecs.world_id.Main, id1, c1)
    -- c1 = transform_component.new()
    -- world_ecs.add_component(world_ecs.world_id.Main, id2, c1)
    -- c1 = transform_component.new()
    -- world_ecs.add_component(world_ecs.world_id.Main, id3, c1)

    -- local c1 = character_tag_component.new_player_tag()
    -- world_ecs.add_component(world_ecs.world_id.Main, id1, c1)
    -- c1 = character_tag_component.new_enemy_tag()
    -- world_ecs.add_component(world_ecs.world_id.Main, id2, c1)
    -- c1 = character_tag_component.new_enemy_tag()
    -- world_ecs.add_component(world_ecs.world_id.Main, id3, c1)

    -- world_ecs.select_component(world_ecs.world_id.Main, transform_component.name,
    --     character_tag_component.tag_player_name)

    local c1 = spawn_player_component.new(vmath.vector3(150, 20, 20))
    world_ecs.add_component(world_ecs.world_id.Main, entity_spawn_player, c1)
    world_ecs.add_system(world_ecs.world_id.Main, spawn_player_system)
    world_ecs.add_system(world_ecs.world_id.Main, move_input_system)
    world_ecs.add_system(world_ecs.world_id.Main, animation_unit_move_system)
    world_ecs.add_system(world_ecs.world_id.Main, camera_follow_system)
    world_ecs.add_system(world_ecs.world_id.Main, aim_moving_system)

    world_ecs.init_systems(world_ecs.world_id.Main)
    -- world_ecs.delete_entity(world_ecs.world_id.Main, id1)

    -- local player = unit_manager.spawn_player()
    -- msg.post(self.camera, events_service.camera.set_target, {
    --     id = player.model.controller_url
    -- })
    -- msg.post(self.location_controller, event_service_controller.controller_events.start_level)
    -- local enemy = unit_manager.spawn_enemy()
end
