local input_service = require "src.services.input_service"
local screen_service = require "src.services.screen_service"
local world_ecs = require "src.ecs.world_ecs"
local log = require("log.log")

function init(self)
    msg.post(".", "acquire_input_focus")
    self.current_url = msg.url()

    local world = world_ecs.new(world_ecs.world_id.Main)
    input_service.addListener(input_service.events.key, self.current_url)
    input_service.addListener(input_service.events.touch, self.current_url)
    input_service.addListener(input_service.events.mouse_move, self.current_url)
    -- game_controller_service.init_controller(game_controller_service.controller_name.game_controller, msg.url())
end

function update(self, dt)
    world_ecs.update_systems(world_ecs.world_id.Main, dt)
end

function fixed_update(self, dt)
    world_ecs.fixed_update_systems(world_ecs.world_id.Main, dt)
end

function on_message(self, message_id, message, sender)
    -- if message_id == events_service.controller_events.all_controllers_init then
    --     -- timer.delay(2, false, function()
    --     msg.post("/gui#debugGui", "hide_element")
    --     local router_controller = router_service.get_router_controller_url()
    --     msg.post(router_controller, events_service.router_events.start_load_location, {
    --         name = router_service.get_all_locations().world.name
    --     })
    --     -- end)
    -- end

    if message_id == input_service.events.key then
        local isMoveInput = input_service.is_move_input(message)
        if isMoveInput then
            input_service.set_input_move(message)
        end
    end

    if message_id == input_service.events.mouse_move then
        input_service.set_input_touch(message)
    end
end

--- @param action on_input.action
function on_input(self, action_id, action)
    input_service.handle_input(action_id, action)
end

function final(self)
    input_service.removeListener(input_service.events.key, self.current_url)
    input_service.removeListener(input_service.events.touch, self.current_url)
    input_service.removeListener(input_service.events.mouse_move, self.current_url)
end
