local input_service = require "src.services.input_service"
local events_service = require "src.services.events_service"
local screen_service = require "src.services.screen_service"
local unit_manager = require "src.managers.unit_manager"
local components_service = require "src.services.components_service"

go.property("url_sprite", msg.url())

function init(self)
	self.current_url       = msg.url()
	self.id_model          = nil

	self.points            = {}
	self.network_object_id = ""
	input_service.addListener(input_service.events.key, self.current_url)
	input_service.addListener(input_service.events.touch, self.current_url)
	input_service.addListener(input_service.events.mouse_move, self.current_url)

	input_service.addListener(input_service.events.mouse_move, self.current_url)
end

function on_message(self, message_id, message, sender)
	if message_id == input_service.events.key then
		local isMoveInput = input_service.is_move_input(message)
		if isMoveInput then
			unit_manager.on_message(self.id_model, components_service.name.move, message_id, message)
			-- msg.post(self.url_input_move, input_service.events.key, message)
		end
	end

	if message_id == events_service.character_events.set_model then
		self.id_model = message.id
		--- @type CharacterModel
		local model = unit_manager.get_model(self.id_model)
		unit_manager.on_message(self.id_model, components_service.name.sprite_animation,
			events_service.animation_events.set_sprite, { url = self.url_sprite })
	end

	-- if message_id == events_service.character_events.change_dir_move then
	-- 	msg.post(self.url_aim, input_service.events.key, message)
	-- end
	-- if message_id == input_service.events.mouse_move then
	-- 	msg.post(self.url_aim, input_service.events.mouse_move, message)
	-- end
end

function final(self)
	input_service.removeListener(input_service.events.key, self.current_url)
	input_service.removeListener(input_service.events.touch, self.current_url)
	input_service.removeListener(input_service.events.mouse_move, self.current_url)
end
